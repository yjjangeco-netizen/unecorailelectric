{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/CSHOP/unecorailelectric/src/app/api/test/search/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json()\r\n    \r\n    const { query, category, minPrice, maxPrice, inStock } = body\r\n\r\n    // 입력값 검증\r\n    if (!query || query.length < 1) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '검색어가 비어있습니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    if (query.length > 200) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '검색어가 너무 깁니다 (200자 이하)'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // 테스트용 더미 데이터\r\n    const dummyResults = [\r\n      {\r\n        id: '1',\r\n        name: '테스트 품목 1',\r\n        specification: '규격 A',\r\n        unit_price: 5000,\r\n        current_quantity: 100,\r\n        total_amount: 500000,\r\n        category: '전기자재',\r\n        stock_status: 'normal'\r\n      },\r\n      {\r\n        id: '2',\r\n        name: '테스트 품목 2',\r\n        specification: '규격 B',\r\n        unit_price: 3000,\r\n        current_quantity: 50,\r\n        total_amount: 150000,\r\n        category: '전기자재',\r\n        stock_status: 'normal'\r\n      }\r\n    ]\r\n\r\n    // 검색어에 따라 결과 필터링\r\n    const filteredResults = dummyResults.filter(item => \r\n      item.name.toLowerCase().includes(query.toLowerCase()) ||\r\n      item.specification.toLowerCase().includes(query.toLowerCase()) ||\r\n      item.category.toLowerCase().includes(query.toLowerCase())\r\n    )\r\n\r\n    // 검색 통계 계산\r\n    const totalQuantity = filteredResults.reduce((sum, item) => sum + (item.current_quantity || 0), 0)\r\n    const totalValue = filteredResults.reduce((sum, item) => sum + (item.total_amount || 0), 0)\r\n    const averagePrice = filteredResults.length > 0 ? totalValue / totalQuantity : 0\r\n\r\n    // 카테고리별 분포\r\n    const categoryDistribution = filteredResults.reduce((acc, item) => {\r\n      const cat = item.category || '미분류'\r\n      acc[cat] = (acc[cat] || 0) + 1\r\n      return acc\r\n    }, {} as Record<string, number>)\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      message: '검색 완료 (테스트 데이터)',\r\n      data: {\r\n        query,\r\n        category,\r\n        minPrice,\r\n        maxPrice,\r\n        inStock,\r\n        resultCount: filteredResults.length,\r\n        totalQuantity,\r\n        totalValue,\r\n        averagePrice: Math.round(averagePrice),\r\n        categoryDistribution,\r\n        results: filteredResults,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('검색 테스트 오류:', error)\r\n    return NextResponse.json({\r\n      ok: false,\r\n      error: '검색 중 오류가 발생했습니다',\r\n      details: error instanceof Error ? error.message : '알 수 없는 오류'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const query = searchParams.get('q') || ''\r\n\r\n    // GET 요청용 간단한 검색\r\n    if (!query || query.length < 1) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '검색어가 비어있습니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // 테스트용 더미 데이터\r\n    const dummyResults = [\r\n      {\r\n        id: '1',\r\n        name: '테스트 품목 1',\r\n        specification: '규격 A',\r\n        unit_price: 5000,\r\n        current_quantity: 100,\r\n        total_amount: 500000,\r\n        category: '전기자재',\r\n        stock_status: 'normal'\r\n      },\r\n      {\r\n        id: '2',\r\n        name: '테스트 품목 2',\r\n        specification: '규격 B',\r\n        unit_price: 3000,\r\n        current_quantity: 50,\r\n        total_amount: 150000,\r\n        category: '전기자재',\r\n        stock_status: 'normal'\r\n      }\r\n    ]\r\n\r\n    // 검색어에 따라 결과 필터링\r\n    const filteredResults = dummyResults.filter(item => \r\n      item.name.toLowerCase().includes(query.toLowerCase()) ||\r\n      item.specification.toLowerCase().includes(query.toLowerCase()) ||\r\n      item.category.toLowerCase().includes(query.toLowerCase())\r\n    )\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      message: '검색 완료 (테스트 데이터)',\r\n      data: {\r\n        query,\r\n        resultCount: filteredResults.length,\r\n        totalQuantity: filteredResults.reduce((sum, item) => sum + (item.current_quantity || 0), 0),\r\n        totalValue: filteredResults.reduce((sum, item) => sum + (item.total_amount || 0), 0),\r\n        results: filteredResults,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('검색 테스트 오류:', error)\r\n    return NextResponse.json({\r\n      ok: false,\r\n      error: '검색 중 오류가 발생했습니다',\r\n      details: error instanceof Error ? error.message : '알 수 없는 오류'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG;QAEzD,SAAS;QACT,IAAI,CAAC,SAAS,MAAM,MAAM,GAAG,GAAG;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,MAAM,MAAM,GAAG,KAAK;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,cAAc;QACd,MAAM,eAAe;YACnB;gBACE,IAAI;gBACJ,MAAM;gBACN,eAAe;gBACf,YAAY;gBACZ,kBAAkB;gBAClB,cAAc;gBACd,UAAU;gBACV,cAAc;YAChB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,eAAe;gBACf,YAAY;gBACZ,kBAAkB;gBAClB,cAAc;gBACd,UAAU;gBACV,cAAc;YAChB;SACD;QAED,iBAAiB;QACjB,MAAM,kBAAkB,aAAa,MAAM,CAAC,CAAA,OAC1C,KAAK,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW,OAClD,KAAK,aAAa,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW,OAC3D,KAAK,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW;QAGxD,WAAW;QACX,MAAM,gBAAgB,gBAAgB,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,CAAC,KAAK,gBAAgB,IAAI,CAAC,GAAG;QAChG,MAAM,aAAa,gBAAgB,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,CAAC,KAAK,YAAY,IAAI,CAAC,GAAG;QACzF,MAAM,eAAe,gBAAgB,MAAM,GAAG,IAAI,aAAa,gBAAgB;QAE/E,WAAW;QACX,MAAM,uBAAuB,gBAAgB,MAAM,CAAC,CAAC,KAAK;YACxD,MAAM,MAAM,KAAK,QAAQ,IAAI;YAC7B,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI;YAC7B,OAAO;QACT,GAAG,CAAC;QAEJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,SAAS;YACT,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA,aAAa,gBAAgB,MAAM;gBACnC;gBACA;gBACA,cAAc,KAAK,KAAK,CAAC;gBACzB;gBACA,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;YACnC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC,QAAQ;QAEvC,iBAAiB;QACjB,IAAI,CAAC,SAAS,MAAM,MAAM,GAAG,GAAG;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,cAAc;QACd,MAAM,eAAe;YACnB;gBACE,IAAI;gBACJ,MAAM;gBACN,eAAe;gBACf,YAAY;gBACZ,kBAAkB;gBAClB,cAAc;gBACd,UAAU;gBACV,cAAc;YAChB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,eAAe;gBACf,YAAY;gBACZ,kBAAkB;gBAClB,cAAc;gBACd,UAAU;gBACV,cAAc;YAChB;SACD;QAED,iBAAiB;QACjB,MAAM,kBAAkB,aAAa,MAAM,CAAC,CAAA,OAC1C,KAAK,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW,OAClD,KAAK,aAAa,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW,OAC3D,KAAK,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW;QAGxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,SAAS;YACT,MAAM;gBACJ;gBACA,aAAa,gBAAgB,MAAM;gBACnC,eAAe,gBAAgB,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,CAAC,KAAK,gBAAgB,IAAI,CAAC,GAAG;gBACzF,YAAY,gBAAgB,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,CAAC,KAAK,YAAY,IAAI,CAAC,GAAG;gBAClF,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;YACnC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}