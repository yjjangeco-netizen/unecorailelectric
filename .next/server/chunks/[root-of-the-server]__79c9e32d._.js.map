{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/CSHOP/unecorailelectric/src/app/api/test/stock-out/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json()\r\n    \r\n    const { itemId, quantity, project, notes, isRental, issuedBy } = body\r\n\r\n    // 입력값 검증\r\n    if (!itemId || itemId.trim().length < 1) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '품목 ID가 비어있습니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    if (!quantity || quantity <= 0) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '수량은 0보다 커야 합니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    if (!issuedBy || issuedBy.trim().length < 1) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '출고자가 비어있습니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // 테스트용 더미 응답 데이터\r\n    const mockStockOut = {\r\n      id: `stock-out-${Date.now()}`,\r\n      itemId,\r\n      quantity,\r\n      project: project || '',\r\n      notes: notes || '',\r\n      isRental: isRental || false,\r\n      issuedBy,\r\n      issuedAt: new Date().toISOString(),\r\n      previousQuantity: 100, // 테스트용 이전 수량\r\n      newQuantity: 90,       // 테스트용 새로운 수량\r\n      totalAmount: quantity * 5000 // 테스트용 단가\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      message: '출고 처리 완료 (테스트 데이터)',\r\n      data: mockStockOut,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('출고 테스트 오류:', error)\r\n    return NextResponse.json({\r\n      ok: false,\r\n      error: '출고 처리 중 오류가 발생했습니다',\r\n      details: error instanceof Error ? error.message : '알 수 없는 오류'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAEjE,SAAS;QACT,IAAI,CAAC,UAAU,OAAO,IAAI,GAAG,MAAM,GAAG,GAAG;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,YAAY,YAAY,GAAG;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,YAAY,SAAS,IAAI,GAAG,MAAM,GAAG,GAAG;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,iBAAiB;QACjB,MAAM,eAAe;YACnB,IAAI,CAAC,UAAU,EAAE,KAAK,GAAG,IAAI;YAC7B;YACA;YACA,SAAS,WAAW;YACpB,OAAO,SAAS;YAChB,UAAU,YAAY;YACtB;YACA,UAAU,IAAI,OAAO,WAAW;YAChC,kBAAkB;YAClB,aAAa;YACb,aAAa,WAAW,KAAK,UAAU;QACzC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,SAAS;YACT,MAAM;YACN,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}