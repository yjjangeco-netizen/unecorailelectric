{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/CSHOP/unecorailelectric/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// 환경 변수에서 Supabase 설정 가져오기\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co'\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'example-key'\n\n// 개발 환경에서는 기본값 사용, 프로덕션에서는 환경변수 필수\nif (process.env.NODE_ENV === 'production' && (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\n// 브라우저용 클라이언트 (SSR 지원)\nexport const createBrowserSupabaseClient = () => {\n  return createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: true\n    }\n  })\n}\n\n// 서버용 클라이언트 (SSR 지원)\nexport const createServerSupabaseClient = () => {\n  return createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  })\n}\n\n// 기존 클라이언트 (하위 호환성)\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n})\n\n// 품목 타입 정의\nexport interface Item {\n  id: string\n  name: string           // 품명\n  specification: string   // 규격\n  maker: string          // 메이커\n  unit_price: number     // 금액\n  purpose: string        // 용도\n  min_stock: number      // 최소재고\n  category?: string\n  description?: string\n  created_at: string\n  updated_at: string\n}\n\n// 입고 타입 정의\nexport interface StockIn {\n  id: string\n  item_id: string\n  quantity: number\n  unit_price: number\n  condition_type: 'new' | 'used_good' | 'used_defective' | 'unknown'\n  reason?: string\n  ordered_by?: string\n  received_by: string\n  received_at: string\n}\n\n// 출고 타입 정의\nexport interface StockOut {\n  id: string\n  item_id: string\n  quantity: number\n  project?: string\n  issued_by: string\n  is_rental: boolean\n  return_date?: string\n  issued_at: string\n}\n\n// 현재 재고 타입 정의\nexport interface CurrentStock {\n  id: string\n  name: string\n  specification: string\n  unit_price: number\n  current_quantity: number\n  total_amount: number\n  notes?: string\n  category?: string\n  stock_status: 'normal' | 'low_stock'\n}\n\nexport interface User {\n  id: string\n  username: string\n  password: string\n  name: string\n  department: string\n  position: string\n  phone: string\n  is_admin: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport interface UserGroup {\n  id: string\n  name: string\n  description: string\n  created_at: string\n}\n\nexport interface UserGroupMember {\n  id: string\n  user_id: string\n  group_id: string\n  created_at: string\n}\n\nexport interface Disposal {\n  id: string\n  stock_in_id: string\n  item_id: string\n  quantity: number\n  disposed_by: string\n  disposed_at: string\n  reason: string\n  notes: string\n  created_at: string\n} "],"names":[],"mappings":";;;;;AAAA;;AAEA,2BAA2B;AAC3B,MAAM,cAAc,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAC5D,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B,IAAI;AAErE,mCAAmC;AACnC;;AAKO,MAAM,8BAA8B;IACzC,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;QAChD,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;YAChB,oBAAoB;QACtB;IACF;AACF;AAGO,MAAM,6BAA6B;IACxC,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;QAChD,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;QAClB;IACF;AACF;AAGO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;IACjE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;QAChB,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///C:/CSHOP/unecorailelectric/src/app/api/test/stock-in/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { createServerSupabaseClient } from '@/lib/supabase'\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const supabase = createServerSupabaseClient()\r\n    const body = await request.json()\r\n    \r\n    const { itemName, quantity, unitPrice, notes, conditionType, reason, orderedBy, receivedBy } = body\r\n\r\n    // 입력값 검증\r\n    if (!itemName || itemName.length < 1) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '품목명이 비어있습니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    if (quantity <= 0 || quantity > 999999) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '수량이 유효하지 않습니다 (1~999,999)'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    if (unitPrice < 0 || unitPrice > 999999999) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '단가가 유효하지 않습니다 (0~999,999,999)'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // 총 금액 계산\r\n    const totalAmount = quantity * unitPrice\r\n    if (totalAmount > 999999999999) {\r\n      return NextResponse.json({\r\n        ok: false,\r\n        error: '총 금액이 너무 큽니다'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // 기존 품목 확인\r\n    const { data: existingItem } = await supabase\r\n      .from('items')\r\n      .select('*')\r\n      .eq('name', itemName)\r\n      .single()\r\n\r\n    let itemId: string\r\n    let newItem = false\r\n\r\n    if (existingItem) {\r\n      // 기존 품목 업데이트\r\n      itemId = existingItem.id\r\n      const { error: updateError } = await supabase\r\n        .from('items')\r\n        .update({\r\n          unit_price: unitPrice,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', itemId)\r\n\r\n      if (updateError) {\r\n        throw new Error(`품목 업데이트 실패: ${updateError.message}`)\r\n      }\r\n    } else {\r\n      // 새 품목 생성\r\n      const newItemData = {\r\n        id: `item_${Date.now()}`,\r\n        name: itemName,\r\n        specification: itemName,\r\n        maker: '미정',\r\n        unit_price: unitPrice,\r\n        purpose: '재고입고',\r\n        min_stock: 0,\r\n        category: '일반',\r\n        description: notes || '',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      }\r\n\r\n      const { data: insertedItem, error: insertError } = await supabase\r\n        .from('items')\r\n        .insert(newItemData)\r\n        .select()\r\n        .single()\r\n\r\n      if (insertError) {\r\n        throw new Error(`새 품목 생성 실패: ${insertError.message}`)\r\n      }\r\n\r\n      itemId = insertedItem.id\r\n      newItem = true\r\n    }\r\n\r\n    // 입고 기록 생성\r\n    const stockInData = {\r\n      id: `stock_in_${Date.now()}`,\r\n      item_id: itemId,\r\n      quantity,\r\n      unit_price: unitPrice,\r\n      condition_type: conditionType || 'new',\r\n      reason: reason || '테스트 입고',\r\n      ordered_by: orderedBy || '테스트',\r\n      received_by: receivedBy || '테스트',\r\n      received_at: new Date().toISOString()\r\n    }\r\n\r\n    const { error: stockInError } = await supabase\r\n      .from('stock_in')\r\n      .insert(stockInData)\r\n\r\n    if (stockInError) {\r\n      throw new Error(`입고 기록 생성 실패: ${stockInError.message}`)\r\n    }\r\n\r\n    // 현재 재고 업데이트\r\n    const { data: currentStock } = await supabase\r\n      .from('current_stock')\r\n      .select('*')\r\n      .eq('name', itemName)\r\n      .single()\r\n\r\n    if (currentStock) {\r\n      // 기존 재고 수량 증가\r\n      const newQuantity = currentStock.current_quantity + quantity\r\n      const newTotalAmount = newQuantity * unitPrice\r\n\r\n      const { error: updateStockError } = await supabase\r\n        .from('current_stock')\r\n        .update({\r\n          current_quantity: newQuantity,\r\n          total_amount: newTotalAmount,\r\n          unit_price: unitPrice,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', currentStock.id)\r\n\r\n      if (updateStockError) {\r\n        throw new Error(`재고 업데이트 실패: ${updateStockError.message}`)\r\n      }\r\n    } else {\r\n      // 새 재고 생성\r\n      const newStockData = {\r\n        id: `stock_${Date.now()}`,\r\n        name: itemName,\r\n        specification: itemName,\r\n        unit_price: unitPrice,\r\n        current_quantity: quantity,\r\n        total_amount: totalAmount,\r\n        notes: notes || '테스트 입고',\r\n        category: '일반',\r\n        stock_status: 'normal'\r\n      }\r\n\r\n      const { error: insertStockError } = await supabase\r\n        .from('current_stock')\r\n        .insert(newStockData)\r\n\r\n      if (insertStockError) {\r\n        throw new Error(`새 재고 생성 실패: ${insertStockError.message}`)\r\n      }\r\n    }\r\n\r\n    // 재고 이력 생성\r\n    const stockHistoryData = {\r\n      id: `history_${Date.now()}`,\r\n      item_id: itemId,\r\n      action_type: 'stock_in',\r\n      quantity_change: quantity,\r\n      previous_quantity: currentStock ? currentStock.current_quantity : 0,\r\n      new_quantity: currentStock ? currentStock.current_quantity + quantity : quantity,\r\n      unit_price: unitPrice,\r\n      total_amount_change: totalAmount,\r\n      notes: `테스트 입고: ${notes || ''}`,\r\n      performed_by: receivedBy || '테스트',\r\n      performed_at: new Date().toISOString()\r\n    }\r\n\r\n    const { error: historyError } = await supabase\r\n      .from('stock_history')\r\n      .insert(stockHistoryData)\r\n\r\n    if (historyError) {\r\n      console.warn('이력 생성 경고:', historyError.message)\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      message: newItem ? '새 품목 입고 완료' : '기존 품목 입고 완료',\r\n      data: {\r\n        itemId,\r\n        itemName,\r\n        quantity,\r\n        unitPrice,\r\n        totalAmount,\r\n        newItem,\r\n        stockInId: stockInData.id,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('입고 테스트 오류:', error)\r\n    return NextResponse.json({\r\n      ok: false,\r\n      error: '입고 처리 중 오류가 발생했습니다.',\r\n      details: error instanceof Error ? error.message : '알 수 없는 오류'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,wHAAA,CAAA,6BAA0B,AAAD;QAC1C,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG;QAE/F,SAAS;QACT,IAAI,CAAC,YAAY,SAAS,MAAM,GAAG,GAAG;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,YAAY,KAAK,WAAW,QAAQ;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,YAAY,KAAK,YAAY,WAAW;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,UAAU;QACV,MAAM,cAAc,WAAW;QAC/B,IAAI,cAAc,cAAc;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,IAAI;gBACJ,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,WAAW;QACX,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,SACL,MAAM,CAAC,KACP,EAAE,CAAC,QAAQ,UACX,MAAM;QAET,IAAI;QACJ,IAAI,UAAU;QAEd,IAAI,cAAc;YAChB,aAAa;YACb,SAAS,aAAa,EAAE;YACxB,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,SACL,MAAM,CAAC;gBACN,YAAY;gBACZ,YAAY,IAAI,OAAO,WAAW;YACpC,GACC,EAAE,CAAC,MAAM;YAEZ,IAAI,aAAa;gBACf,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE,YAAY,OAAO,EAAE;YACtD;QACF,OAAO;YACL,UAAU;YACV,MAAM,cAAc;gBAClB,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;gBACxB,MAAM;gBACN,eAAe;gBACf,OAAO;gBACP,YAAY;gBACZ,SAAS;gBACT,WAAW;gBACX,UAAU;gBACV,aAAa,SAAS;gBACtB,YAAY,IAAI,OAAO,WAAW;gBAClC,YAAY,IAAI,OAAO,WAAW;YACpC;YAEA,MAAM,EAAE,MAAM,YAAY,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SACtD,IAAI,CAAC,SACL,MAAM,CAAC,aACP,MAAM,GACN,MAAM;YAET,IAAI,aAAa;gBACf,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE,YAAY,OAAO,EAAE;YACtD;YAEA,SAAS,aAAa,EAAE;YACxB,UAAU;QACZ;QAEA,WAAW;QACX,MAAM,cAAc;YAClB,IAAI,CAAC,SAAS,EAAE,KAAK,GAAG,IAAI;YAC5B,SAAS;YACT;YACA,YAAY;YACZ,gBAAgB,iBAAiB;YACjC,QAAQ,UAAU;YAClB,YAAY,aAAa;YACzB,aAAa,cAAc;YAC3B,aAAa,IAAI,OAAO,WAAW;QACrC;QAEA,MAAM,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SACnC,IAAI,CAAC,YACL,MAAM,CAAC;QAEV,IAAI,cAAc;YAChB,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,aAAa,OAAO,EAAE;QACxD;QAEA,aAAa;QACb,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,iBACL,MAAM,CAAC,KACP,EAAE,CAAC,QAAQ,UACX,MAAM;QAET,IAAI,cAAc;YAChB,cAAc;YACd,MAAM,cAAc,aAAa,gBAAgB,GAAG;YACpD,MAAM,iBAAiB,cAAc;YAErC,MAAM,EAAE,OAAO,gBAAgB,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,iBACL,MAAM,CAAC;gBACN,kBAAkB;gBAClB,cAAc;gBACd,YAAY;gBACZ,YAAY,IAAI,OAAO,WAAW;YACpC,GACC,EAAE,CAAC,MAAM,aAAa,EAAE;YAE3B,IAAI,kBAAkB;gBACpB,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE,iBAAiB,OAAO,EAAE;YAC3D;QACF,OAAO;YACL,UAAU;YACV,MAAM,eAAe;gBACnB,IAAI,CAAC,MAAM,EAAE,KAAK,GAAG,IAAI;gBACzB,MAAM;gBACN,eAAe;gBACf,YAAY;gBACZ,kBAAkB;gBAClB,cAAc;gBACd,OAAO,SAAS;gBAChB,UAAU;gBACV,cAAc;YAChB;YAEA,MAAM,EAAE,OAAO,gBAAgB,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,iBACL,MAAM,CAAC;YAEV,IAAI,kBAAkB;gBACpB,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE,iBAAiB,OAAO,EAAE;YAC3D;QACF;QAEA,WAAW;QACX,MAAM,mBAAmB;YACvB,IAAI,CAAC,QAAQ,EAAE,KAAK,GAAG,IAAI;YAC3B,SAAS;YACT,aAAa;YACb,iBAAiB;YACjB,mBAAmB,eAAe,aAAa,gBAAgB,GAAG;YAClE,cAAc,eAAe,aAAa,gBAAgB,GAAG,WAAW;YACxE,YAAY;YACZ,qBAAqB;YACrB,OAAO,CAAC,QAAQ,EAAE,SAAS,IAAI;YAC/B,cAAc,cAAc;YAC5B,cAAc,IAAI,OAAO,WAAW;QACtC;QAEA,MAAM,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SACnC,IAAI,CAAC,iBACL,MAAM,CAAC;QAEV,IAAI,cAAc;YAChB,QAAQ,IAAI,CAAC,aAAa,aAAa,OAAO;QAChD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,SAAS,UAAU,eAAe;YAClC,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,WAAW,YAAY,EAAE;gBACzB,WAAW,IAAI,OAAO,WAAW;YACnC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}